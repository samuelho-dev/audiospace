generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  sessionState      String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id            String   @id @default(cuid())
  session_token String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @unique
  expires       DateTime
}

model EmailVerification {
  id      String   @id @default(cuid())
  userId  String   @unique
  user    User     @relation(fields: [userId], references: [id])
  token   String   @unique
  expires DateTime
}

model User {
  id            String             @id @default(cuid())
  role          Role               @default(USER)
  username      String             @unique
  email         String             @unique
  password      String?
  emailVerified EmailVerification?
  image         String?
  wishlist      Product[]          @relation("Wishlist")
  cart          Product[]          @relation("Cart")
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  verifiedAt    DateTime?
  seller        Seller?
  createdAt     DateTime           @default(now())
  entries       BattleEntry[]      @relation("Entries")
  likedEntries  BattleVote[]
  ratings       Rating[]
}

enum Role {
  ADMIN
  USER
  SELLER
}

model ProductDescriptionBlob {
  id      String   @id @default(cuid())
  data    Bytes
  product Product?
}

model PostContentBlob {
  id   String @id @default(cuid())
  data Bytes
  post Post?
}

model Seller {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  description String?
  products    Product[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ProductCategory {
  id            Int                  @id @default(autoincrement())
  name          String               @unique
  subcategories ProductSubcategory[]
  products      Product[]
}

model ProductSubcategory {
  id         Int             @id @default(autoincrement())
  name       String
  category   ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId Int
  products   Product[]

  @@index([categoryId])
}

model Product {
  id               String                 @id @default(cuid())
  seller           Seller                 @relation(fields: [sellerId], references: [id])
  sellerId         Int
  name             String
  images           ProductImage[]
  category         ProductCategory        @relation(fields: [categoryId], references: [id])
  categoryId       Int
  subcategory      ProductSubcategory[]
  shortDescription String?
  description      ProductDescriptionBlob @relation(fields: [descriptionId], references: [id])
  descriptionId    String                 @unique
  price            Int
  previewUrl       String?
  downloadUrl      String
  isPromoted       ProductPromoteStatus   @default(NONE)
  isOnSale         Boolean                @default(false)
  discountRate     Int
  wishlistUsers    User[]                 @relation("Wishlist")
  cartUsers        User[]                 @relation("Cart")
  createdAt        DateTime               @default(now())
  transactionItem  TransactionItem[]
  ratings          Rating[]
  popularity       Int?

  @@index([sellerId])
  @@index([categoryId])
  @@index([descriptionId])
}

enum ProductPromoteStatus {
  FEATURED
  NEW
  NONE
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  imageUrl  String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@index([productId])
}

model Rating {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  rating    Int
  review    String? @db.Text

  @@unique([productId, userId])
  @@index([productId])
  @@index([userId])
}

model Battle {
  id            Int           @id @default(autoincrement())
  description   String
  entries       BattleEntry[] @relation("BattleEntry")
  sample        String?
  createdAt     DateTime      @default(now())
  endedAt       DateTime?
  isActive      BattleStatus  @default(ACTIVE)
  winner        BattleEntry?  @relation("Winner", fields: [winnerEntryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  winnerEntryId String?       @unique
}

model BattleEntry {
  id           String       @id @default(cuid())
  user         User         @relation("Entries", fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  trackUrl     String
  rating       Int          @default(0)
  battle       Battle       @relation("BattleEntry", fields: [battleId], references: [id])
  battleId     Int
  subimittedAt DateTime     @default(now())
  winner       Battle?      @relation("Winner")
  votes        BattleVote[]

  @@unique([battleId, userId])
  @@unique([userId])
  @@index([battleId])
}

enum BattleStatus {
  ACTIVE
  VOTING
  ENDED
}

model BattleVote {
  id            Int         @id @default(autoincrement())
  battleEntry   BattleEntry @relation(fields: [battleEntryId], references: [id])
  battleEntryId String
  user          User        @relation(fields: [userId], references: [id])
  userId        String

  @@unique([battleEntryId, userId])
  @@index([userId])
  @@index([battleEntryId])
}

model Transaction {
  id               String            @id @default(cuid())
  paypalChargeId   String?           @unique
  paypalReceiptUrl String?
  paymentId        String?
  payerId          String?
  paymentStatus    String
  paypalEmail      String
  user             User              @relation(fields: [userId], references: [id])
  userId           String
  products         TransactionItem[]
  total            Int
  createdAt        DateTime          @default(now())

  @@index([userId])
}

model TransactionItem {
  id            String      @id @default(cuid())
  product       Product     @relation(fields: [productId], references: [id])
  productId     String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String
  quantity      Int
  price         Int

  @@index([transactionId])
  @@index([productId])
}

model Post {
  id          String          @unique
  title       String
  image       String
  description String
  content     PostContentBlob @relation(fields: [contentId], references: [id])
  contentId   String          @unique
  author      String          @default("Audiospace Team")
  tag         Tag             @relation(fields: [tagId], references: [id])
  tagId       Int
  createdAt   DateTime        @default(now())

  @@index([tagId])
  @@index([contentId])
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}
