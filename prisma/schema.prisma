// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String    @id @default(cuid())
    user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId            String    @unique
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?   @db.Text
    access_token      String?   @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?   @db.Text
    session_state     String?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String     @id @default(cuid())
    sessionToken String     @unique
    user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String     @unique
    expires      DateTime
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ProductCategory {
    id              Int                 @id @default(autoincrement())
    name            String
    subcategories   ProductSubcategory[]
}

model ProductSubcategory {
    id          Int                 @id @default(autoincrement())
    name        String
    category    ProductCategory     @relation(fields: [categoryId], references: [id])
    categoryId  Int                 
    products    Product[]
    @@index([categoryId])
}


model Product {
    id              Int                     @id @default(autoincrement())
    name            String
    sellerId        String
    images          ProductImage[]
    Subcategory     ProductSubcategory      @relation(fields: [subcategoryId], references: [id])
    subcategoryId   Int                     @unique
    description     String
    price           Int
    downloadUrl     String
    isPromoted      Boolean
    isOnSale        Boolean
    discount_rate   Int
    battles         Battle[] 
    createdAt       DateTime        @default(now())
}

model ProductImage {
    id         Int          @id @default(autoincrement())
    imageUrl   String
    product    Product      @relation(fields: [productId], references: [id])
    productId  Int          @unique
}

model Battle {
    id              Int             @id @default(autoincrement())
    description     String
    entries         BattleEntry[]
    prizes          Product[]
    winnerId        String
    createdAt       DateTime        @default(now())
    duration        Int
    isActive        BattleStatus    @default(ACTIVE)
}

model BattleEntry {
    id          Int     @id @default(autoincrement())
    userId      String
    trackUrl    String
    rating      Int     @default(0)
    Battle      Battle  @relation(fields: [battleId], references: [id])
    battleId    Int     @unique
}

enum BattleStatus {
    ACTIVE
    ENDED
}